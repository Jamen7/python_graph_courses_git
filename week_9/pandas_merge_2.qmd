
## Datasets & Packages

```{python}
import pandas as pd
import country_converter as cc

# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```

## One to many joins

```{python}
print(people)
test_info_many
```

```{python}
pd.merge(people,test_info_many)
```

## Practice q: merging one-to-many crop yields

```{python}
print(farm_info)
crop_yields
```

Using merge() will result in 5 rows; the farm_info rows will be duplicated to match the crop_yields rows
```{python}
pd.merge(farm_info,crop_yields)
```

## Multiple key columns

```{python}
print(traffic_flow)
pollution_levels
```

```{python}
# Incorrect
pd.merge(traffic_flow,pollution_levels, on='street_name')
```

```{python}
pd.merge(traffic_flow,pollution_levels, on=['street_name', 'time_of_day'])
```

## Practice q: calculate oil consumption per capita

```{python}
oil = oil_consumption.sort_values(by=['country', 'year'])
pop = tidyr_population.sort_values(by=['country', 'year'])
```

```{python}
oil_pop = pd.merge(oil, pop, on=['country', 'year'], how='left')
oil_pop
```

```{python}
oil_pop['consumption_per_capita'] = oil_pop['oil_consump'] / oil_pop['population']
oil_pop
```

```{python}
oil_pop.sort_values(by=['consumption_per_capita'], ascending=False).query('year== 1995')
```

## Key Mismatches

```{python}
print(people)
test_info_diff
```

```{python}
pd.merge(people,test_info_diff)
```

```{python}
test_info_diff['name'] =test_info_diff['name'].str.title()
```

```{python}
pd.merge(people,test_info_diff)
```

```{python}
test_info_diff['name'].unique() # Charlie has white space
```

```{python}
test_info_diff['name'] =test_info_diff['name'].str.strip() 
```

```{python}
pd.merge(people,test_info_diff)
```

## Pravtice q: inner join countries

```{python}
print(asia_countries)
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

```{python}
print(asia_countries['Country'].unique())
asia_population['Country'].unique() # Capitalise Indonesia and Philipines is missing a p
```

```{python}
asia_population['Country'] = asia_population['Country'].str.title()
asia_population['Country'] = asia_population['Country'].str.replace('Philipines','Philippines')
```

```{python}
pd.merge(asia_countries, asia_population)
```

## Key mismatches: oil consumption example

```{python}
print(oil_consumption.sort_values(['country', 'year']))
tidyr_population
```

```{python}
oil_pop2 = pd.merge(oil_consumption, tidyr_population, on=['country', 'year'], how='left').sort_values(['country','year'])
oil_pop2 
```

```{python}
oil_countries = set(oil_consumption['country'].unique())
pop_countries = set(tidyr_population['country'].unique())
```

```{python}
# countries in oil but not in pop
oil_countries - pop_countries
```

```{python}
# countries in pop but not in oil
pop_countries - oil_countries
```

## Merging with country codes

```{python}
cc.convert('Mozambique', to='ISO3')
```

```{python}
oil_consumption['country_code'] = cc.convert(oil_consumption['country'], to='ISO3')
tidyr_population['country_code'] = cc.convert(tidyr_population['country'], to='ISO3')
```

```{python}
oil_countries = set(oil_consumption['country_code'].unique())
pop_countries = set(tidyr_population['country_code'].unique())
```

```{python}
oil_countries - pop_countries
```

## Practice q: merging oil consumption with geographic data

```{python}
print(oil_2012)
country_regions
```

```{python}
oil_2012['country_code'] = cc.convert(oil_2012['country'], to='ISO3')
oil_2012
```

```{python}
oil_cont = pd.merge(oil_2012,country_regions, on='country_code').sort_values(['continent', 'oil_consump']).sort_values(['oil_consump'], ascending=False)
oil_cont
```

```{python}
# Highest oil consumption is ['USA', 'China', 'Russia', 'Australia', 'Egypt']
oil_cont.loc[oil_cont.groupby("continent")["oil_consump"].idxmax()].sort_values(
    ["oil_consump"], ascending=False
) 
```


