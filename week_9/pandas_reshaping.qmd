
## Packages

```{python}
import pandas as pd
import plotly.express as px
```

## Data

```{python}
# Temperatures dataset
temperatures = pd.DataFrame(
    {
        "country": ["Sweden", "Denmark", "Norway"],
        "1994": [1, 2, 3],
        "1995": [3, 4, 5],
        "1996": [5, 6, 7],
    }
)

# Fuels Wide dataset
fuels_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_per_capita_wide.csv"
)

# Eurostat Births Wide dataset
euro_births_wide = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/euro_births_wide.csv"
)

# Contracts dataset
contracts = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/chicago_contracts_20_23.csv"
)

# Population dataset
population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
```

## What Do "Wide" and "Long" mean?

In the wide dataset, each observational unit (each product) occupies only one row, and each measurement (sales in Jan, Feb, Mar) is in a separate column.

In the long dataset, on the other hand, each observational unit (each product) occupies multiple rows, with one row for each measurement.

## Practice q: wide or long?
```{python}
temperatures # this data is a wide format
```

## When should you use wide vs. long data?

The truth is, it really depends on what you want to do! The wide format is great for displaying data because it’s easy to visually compare values this way. Long data is best for some data analysis tasks, like grouping and plotting.

It is essential to know how to switch from one format to the other easily. Switching from the wide to the long format, or the other way around, is called reshaping.

## From wide to long

```{python}
fuels_wide
```

We observe that each observational unit (each country) occupies only one row, with the repeated measurements of fossil fuel consumption (in kilowatt-hour equivalents) spread out across multiple columns. Hence, this dataset is in a wide format.

To convert it to a long format, we can use the convenient melt function. Within melt, can define the id variables, which we do not want to reshape:

```{python}
fuels_long = fuels_wide.melt(id_vars=['Entity', 'Code'])
fuels_long
```

The years are now indicated in the variable variable, and all the consumption values occupy a single variable, value. We may wish to rename the variable column to year, and the value column to oil_consumption. This can be done directly in the melt function:

```{python}
fuels_long = fuels_wide.melt(id_vars=['Entity', 'Code'], var_name='year', value_name='oil_consumption')
fuels_long
```

You may also want to remove the y_ in front of each year. This can be achieved with a string operation. We’ll also arrange the data by country and year:

```{python}
fuels_long['year']= fuels_long['year'].str.replace('y_', '').astype(int)
fuels_long = fuels_long.sort_values(by=['Entity', 'year'])
fuels_long
```

- Used str.replace() to remove the y_ prefix from each year.
- Converted the year column to integers using astype(int).
- Sorted the data by “Entity” and “year” using sort_values()

## Practice q: temperatures to long

```{python}
temperatures_long = temperatures.melt(id_vars='country', var_name='year', value_name='avg_temp')
temperatures_long
```

## Practice q: Eurostat births to long

```{python}
euro_births_wide.head()
euro_births_long = euro_births_wide.melt(id_vars='country',  var_name='year', value_name= 'births_count'
)
euro_births_long['year'] = euro_births_long['year'].str.replace('x', '').astype(int)
euro_births_long.head()
```

## Using Long Data for Analysis

Let’s see why long data is often better for analysis.

```{python}
print(fuels_wide.head())
fuels_long.head()
```

If we want to find the average fossil fuel consumption per country, this is very easy to do with the long format:

```{python}
fuels_long.groupby('Entity')['oil_consumption'].mean()
```

But with the wide format, this is not so easy:

```{python}
fuels_wide[['y_1970', 'y_1980', 'y_1990', 'y_2000', 'y_2010', 'y_2020']].mean(axis=1)
```

Imagine if you had 100 years of data! And mean is a fairly simple operation.

Long data is also very useful for plotting.

For example, to plot the average fossil fuel consumption per country over time, we can use the following code:

```{python}
subset = fuels_long.query('Entity in ["Peru", "Iran", "China"]')

px.line(subset, x='year', y='oil_consumption', color='Entity', title='Average Fossil Fuel Consumption per Country')
```

To create a plot like this with the wide format is not directly possible, since the data you want to plot is scattered across multiple columns.

So as you can see, while wide data is great for display, long data is very useful for analysis and plotting.

## From long to wide

While wide data tends to come from external sources (as we have seen above), long data, on the other hand, is likely to be created by you while data wrangling, especially in the course of grouped aggregations.

```{python}
contracts
```

```{python}
contracts_summary = contracts.groupby("state")["year"].value_counts().reset_index(name='count')
contracts_summary
```

The output of this grouped operation is a quintessentially “long” dataset. Each observational unit (each state) occupies multiple rows, with one row for each measurement (each year).

Now, let’s see how to convert such long data into a wide format with pivot().

The code is quite straightforward:

```{python}
contracts_wide = contracts_summary.pivot(index='state', columns='year', values='count').reset_index()
contracts_wide.head()
```

As you can see, pivot() has three important arguments:

- index defines which column(s) to use as the new index. In our case, it’s the “state” since we want each row to represent one state.
- columns identifies which variable to use to define column names in the wide format. In our case, it’s the “year”. You can see that the years are now the column names.
- values specifies which values will become the core of the wide data format. In our case, it’s the number of contracts “count”.

You might also want to have the years be your primary observational units, with each year occupying one row. This can be carried out similarly to the above example, but with year as the index and state as the columns:

 ```{python}
 contracts_wide_year = contracts_summary.pivot(
    index="year", columns="state", values="count"
).reset_index()
contracts_wide_year
 ```

## Practice q: temperatures back to wide


```{python}
temperatures_wide = temperatures_long.pivot(index="country",columns= 'year', values='avg_temp').reset_index()
temperatures_wide
```

## Practice q: population to wide

```{python}
population_wide = population.pivot(index='country', columns='year', values='population').reset_index()
population_wide
```