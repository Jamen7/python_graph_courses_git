
# Imports

```{python}
from openai import OpenAI
import pandas as pd
import numpy as np
#from local_settings import OPENAI_KEY
```

# Setting up the OpenAI client

```{python}
client = OpenAI(api_key="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")
```

# Making first call

```{python}
response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages= [{
        "role": "user",
        "content": "What is the most tourist-friendly in France"
    }]
)
```

```{python}
response.choices[0].message.content
```

## Defining a helper function

```{python}
def llm_chat(message):
    response = client.chat.completions.create(
    model="gpt-4o-mini",
    messages= [{
        "role": "user",
        "content": message}]
    )
    return response.choices[0].message.content
```
```{python}
llm_chat("tell me why Python is an awesome platoform")
```

## Practice q: get tourist-friendly city in Brazil

```{python}
rec_brazil = llm_chat("What is the most tourist-friendly city in Brazil?")
print(rec_brazil)
```

## Variables as Prompt inputs

```{python}
def city_rec(country):
    prompt = f"What is the most tourist-friendly city in { country}?"
    return llm_chat(prompt)

city_recVec = np.vectorize(city_rec)
```

```{python}
city_rec("South Africa")
```

```{python}
city_recVec(["South Africa", "Mali"])
```
```{python}
country_df = pd.DataFrame({"country": ["Ethiopia", "Mozambique", "South Africa", "Ghana"]})

country_df
```

```{python}
# Using the vectorised function on a dataframe

country_df["city_rec"] = city_recVec(country_df['country'])
country_df.to_csv("../outputs/city_rec_afr.csv", index=False)
```

## Practice q: get local dishes

```{python}
def get_local_dishes(country):
    prompt = f"What are the most famous local dishes from {country}?"
    return llm_chat(prompt)

get_local_dishes = np.vectorize(get_local_dishes)
```
```{python}
country_df['local_dishes'] = get_local_dishes(country_df['country'])
country_df
```

## Automated summary: movies dataset

```{python}
import vega_datasets as vd

movies = vd.data.movies().head()
movies
```
```{python}
movies["full_dict"] = movies.to_dict(orient="records")
movies
```
```{python}
def movie_performance(movie_data):
    prompt = f"Considering the following data on this movie {movie_data}, provide a brief summary of its performance for my report."

    return llm_chat(prompt)

movie_perf_vec = np.vectorize(movie_performance)
```
```{python}
movies["llm_summary"] = movie_perf_vec(movies["full_dict"])
```
```{python}
movies.to_csv('../outputs/movies_chat.csv', index=False)
```

## Practice q: weather summary

```{python}
weather = vd.data.seattle_weather().head()
weather["full_dict"] = weather.to_dict(orient="records")
weather
```

```{python}

def weather_daily(weather_data):
    prompt = f"Considering the following data on the day {weather_data}, provide a one-paragraph summary of the weather for a report."

    return llm_chat(prompt)

weather_daily_vec = np.vectorize(weather_daily)
```

```{python}
weather['weather_summary'] = weather_daily_vec(weather["full_dict"])
```
```{python}
weather.to_csv('../outputs/weather_chat.csv', index=False)
```