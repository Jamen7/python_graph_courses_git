
## Imports

```{python}
import pandas as pd
import numpy as np
import vega_datasets as vd
import plotly.express as px
```
```{python}
tips = px.data.tips()
tips['day'].value_counts()
```
```{python}
day_mapping = {
    "Sun": 'Sunday',
    'Sat': "Saturday",
    'Thur': 'Thursday',
    "Fri": "Friday"
}

tips['day_full'] = tips['day'].replace(day_mapping)
tips
```

## Practice q: Abbreviate Sex

```{python}
tips['sex_abbr'] = tips['sex'].replace({'Female': 'F', 'Male': 'M'})
tips.head()
```

# Handling missing values with replaces()

```{python}
movies = vd.data.movies()
movies['Creative_Type'].value_counts(dropna=False)
```
```{python}
# Replacing None values with a string
movies['Creative_Type'] = movies['Creative_Type'].replace({None : 'Unknown/Unclear'})
movies['Creative_Type'].value_counts(dropna=False)
```

```{python}
# Replacing NaN values with a number
movies['US_DVD_Sales'].tail(10)
movies['US_DVD_Sales'] = movies['US_DVD_Sales'].replace({np.nan : 0})
```
```{python}
movies['US_DVD_Sales'].tail(13)
```

## Practice q: Standardize MPAA Ratings

```{python}
movies['MPAA_Rating'] = movies['MPAA_Rating'].replace({None : 'Unrated', 'Not Rated': 'Unrated'})
movies['MPAA_Rating'].value_counts()
```

## Categorizing numeric dataq with custom function

- If the value is less than 10 million, the category is "Low".
- If the value is between 10 million and 50 million, the category is "Medium".
- If the value is greater than 50 million, the category is "High".

```{python}
def categ_gross(gross):
    if gross < 10000000:
        return "Low"
    elif gross >= 10000000 and gross <= 50000000:
        return "Medium"
    elif gross > 50000000:
        return "High"
    else:
        return None 


categ_gross_vec = np.vectorize(categ_gross)
```
```{python}
movies['Gross_category'] = categ_gross_vec(movies['US_Gross'])
movies['Gross_category'].value_counts(dropna=False)
```

## Complex transformation with custom functions

- For Super Hero movies, if the US gross and worldwide gross are the same (indicating sales were only in the US), the movie is flagged as a US action movie.
- For Super Hero movies, if the worldwide gross is greater than the US gross, the movie is flagged as a global action movie.
- For all other movies, we leave the flag blank

```{python}
# Define the function to flag movies based on the conditions
def flag_movie(movie_type, us, worldwide):
    if movie_type == 'Super Hero' and us == worldwide:
        return 'US action movie'
    elif movie_type == 'Super Hero' and worldwide > us:
        return 'Global action movie'
    else:
        return None

flag_movie_vec = np.vectorize(flag_movie)
```

```{python}
flag_movie('Super Hero', 100, 100)
flag_movie('Super Hero', 100, 200)
flag_movie('Comedy', 100, 200)
```

```{python}
movies['Action_Flag'] = flag_movie_vec(movies['Creative_Type'], movies['US_Gross'], movies['Worldwide_Gross'])
movies['Action_Flag'].value_counts(dropna=False)
```

## Practice q: Flag movies based on ratings

```{python}
def flag_movie_rat(rot_tom, imdb):
    if rot_tom > 70 and imdb < 5:
        return "Critic-friendly"
    elif rot_tom < 50 and imdb > 7:
        return "Commercial"
    else:
        return "Other"

flag_movie_ratVec = np.vectorize(flag_movie_rat)
```
```{python}
flag_movie_rat(75,4)
```
```{python}
movies['Rating_Flag'] = flag_movie_ratVec(movies['Rotten_Tomatoes_Rating'], movies['IMDB_Rating'])
movies['Rating_Flag'].value_counts()
```
```{python}
movies[['Title','Rating_Flag']].query('Rating_Flag=="Commercial" | Rating_Flag=="Critic-friendly"')
```