
## Imports


```{python}
import pandas as pd
import vega_datasets as vd
import plotly.express as px
import warnings
import calendar

pd.options.mode.copy_on_write = True

warnings.filterwarnings('ignore')
```

## Data

```{python}
weather_raw = vd.data.seattle_weather()

# Select just 2012 data using query and add a month column
weather = weather_raw.query("date.dt.year == 2012")
weather["month"] = pd.Categorical(
    weather["date"].dt.strftime("%B"),
    categories=list(calendar.month_name[1:]),
    ordered=True,
)
weather
```

## Adding summary statistics with transform()


```{python}
weather.groupby('month').agg(mean_precip=('precipitation', 'mean'))
```


```{python}
weather['mean_precip_month'] = weather.groupby('month')['precipitation'].transform('mean')
weather
```

```{python}
weather['sum_precip_month'] = weather.groupby('month')['precipitation'].transform('sum')
weather
```

```{python}
weather['precip_month_perc'] = 100 * (weather['precipitation'] / weather['sum_precip_month'])
weather
```

## Practice q: daily tip proportions


```{python}
tips = px.data.tips()
tips

```

```{python}
tips['daily_total_tips'] = tips.groupby('day')['tip'].transform('sum')
tips['tip_proportion'] = tips['tip'] / tips['daily_total_tips']
tips
```

```{python}
weather = weather[['date', 'month', 'precipitation', 'wind', 'weather']]
weather
```

## Counting values within groups using value_counts()

```{python}
weather['weather'].value_counts()
```

```{python}
weather['weather'].value_counts(normalize=True)
```

Grouped version

```{python}
weather.groupby('month')['weather'].value_counts().reset_index()
```

```{python}
weather.groupby('month')['weather'].value_counts(normalize=True).reset_index()
```

## Practice q: count smokers and non-smokers by day


```{python}
tips.groupby('day')['smoker'].value_counts().reset_index()
```

## Cumulative sums


```{python}
# Cumulative rain per month in the weather dataset

weather['precip_cumul'] = weather.groupby('month')['precipitation'].cumsum()
weather
```

## Practice q: cumulative tip amount by day

```{python}
tips = px.data.tips()
tips = tips.sort_values("day")
tips["cumul_total_bill_day"] = tips.groupby("day")["total_bill"].cumsum()
tips["cumul_tip_day"] = tips.groupby("day")["tip"].cumsum()
tips
```